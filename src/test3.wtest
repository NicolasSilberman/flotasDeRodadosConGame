import trafic.*
import otrosRodados.*
import dependencia.*
import pedidos.*

describe "dependencias y flotas"{
//dependencias	
const deportes = new Dependencias()
//flota disponible
const cachito = new Corsa()
const corsa2 = new Corsa()
const corsa3 = new Corsa()
const kwid1 = new Kwid()
const especial1 = new AutosEspeciales()
//pedidos
const p1 = new Pedidos()
const p2 = new Pedidos()



fixture{

//fixture flota
cachito.color("rojo")
corsa2.color("azul")
corsa3.color("verde")
kwid1.tanqueAdicional()
especial1.capacidad(5)
especial1.velocidadMaxima(160)
especial1.peso(1200)
especial1.color("beige")

//fixture deportes
deportes.empleados(45) 
deportes.flota([cachito,corsa2,corsa3,kwid1,especial1])
deportes.pedidos([p1,p2])


//fixture pedido 1
p1.distancia(960)
p1.tiempo(8)
p1.pasajeros(4)
p1.coloresRechazados(["negro","azul"])

//fixture pedido 2
p2.distancia(960)
p2.tiempo(8)
p2.pasajeros(6)
p2.coloresRechazados(["negro","azul"])
}	

test "deportes"{
assert.equals(6450,deportes.pesoTotalFlota())
assert.that(deportes.estaBienEquipada())
assert.equals(7,deportes.capacidadTotalEnColor('azul'))
assert.equals("beige", deportes.colorDelRodadoMasRapido())
assert.equals(25,deportes.capacidadFaltante())
assert.that(deportes.esGrande())
assert.equals(10,deportes.pasajerosPedidos())
assert.that(deportes.esteColorEsIncompatible("azul"))
assert.equals(p2,deportes.pedidosSinSatisfacer())


	
}


	
}